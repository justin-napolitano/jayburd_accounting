services:
  db:
    image: pgvector/pgvector:pg16
    container_name: finance-db
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ}
    ports: ["5434:5432"]
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10
  db-bootstrap:
    image: postgres:16
    container_name: finance-db-bootstrap
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./db/admin:/app/db/admin:ro
      - ./db/migrations:/app/db/migrations:ro
      - ./ops/scripts:/app/ops/scripts:ro
    command: ["/bin/bash", "/app/ops/scripts/bootstrap.sh"]
    restart: "no"

  ingestor-email:
    build: ./ingestor-email
    container_name: finance-ingestor-email
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - IMAP_HOST=${IMAP_HOST}
      - IMAP_USER=${IMAP_USER}
      - IMAP_PASS=${IMAP_PASS}
      - IMAP_FOLDER=${IMAP_FOLDER}
      - RAW_DIR=${RAW_DIR}
      - BANK_NAME=${BANK_NAME}
    volumes:
      - raw_data:/data/raw
    restart: "no"

  normalizer:
    build: ./normalizer
    container_name: finance-normalizer
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - RAW_DIR=${RAW_DIR}
    volumes:
      - raw_data:/data/raw
    restart: "no"

  classifier:
    build: ./classifier
    container_name: finance-classifier
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CLASSIFY_LOOKBACK_DAYS=180
      - RULES_PATH=/app/config/rules.yaml
    volumes:
      - ./config:/app/config:ro

  budgeter:
    build: ./budgeter
    container_name: finance-budgeter
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BUDGET_FILE=/app/config/budgets.yaml
      - BUDGET_PERIOD=2025-10
    volumes:
      - ./config:/app/config:ro
    restart: "no"

  api:
    build: ./api
    container_name: finance-api
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      # use read-only creds here
      - POSTGRES_USER=${POSTGRES_READONLY_USER}
      - POSTGRES_PASSWORD=${POSTGRES_READONLY_PASSWORD}
      - POSTGRES_RO_USER=${POSTGRES_READONLY_USER}
      - POSTGRES_RO_PASSWORD=${POSTGRES_READONLY_PASSWORD}
    ports:
      - "8010:8000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/healthz >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

  scheduler:
    build: ./scheduler
    container_name: finance-scheduler
    depends_on:
      db:
        condition: service_healthy
    environment:
      - COMPOSE_FILE=/workspace/docker-compose.yaml
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - HOST_WORKSPACE=${HOST_WORKSPACE}      
    volumes:
      - ${DOCKER_SOCK_PATH}:/var/run/docker.sock
      - ${HOST_WORKSPACE}:${HOST_WORKSPACE}:ro
    restart: unless-stopped


  backup:
    build: ./backup
    container_name: finance-backup
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_DIR=${BACKUP_DIR}
      - BACKUP_INTERVAL_SECONDS=${BACKUP_INTERVAL_SECONDS}
      - BACKUP_KEEP_COUNT=${BACKUP_KEEP_COUNT}
    volumes:
      - backups:/backups
    restart: unless-stopped

  teller-sync:
    build:
      context: ./teller-sync
    container_name: finance-teller-sync
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TELLER_BASE_URL=${TELLER_BASE_URL}
      - TELLER_CERT=${TELLER_CERT_PATH}
      - TELLER_KEY=${TELLER_KEY_PATH}
      - FIN_ENC_KEY=${FIN_ENC_KEY}
      - TELLER_ENROLLMENT_ID=${TELLER_ENROLLMENT_ID}
      - TELLER_ACCESS_TOKEN=${TELLER_ACCESS_TOKEN}
      #- TELLER_CA_PATH=${TELLER_CA_PATH}
      - TELLER_SINCE_DAYS=${TELLER_SINCE_DAYS}
      - TZ=${TZ}
    volumes:
      - ./secrets/teller:/secrets/teller:ro
    depends_on:
      db:
        condition: service_healthy
    command: ["python", "/app/sync.py"]
    restart: "no"

  teller-enroll:
    build:
      context: ./teller-sync
    container_name: finance-teller-enroll
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TELLER_BASE_URL=${TELLER_BASE_URL}
      - TELLER_CERT=${TELLER_CERT_PATH}
      - TELLER_KEY=${TELLER_KEY_PATH}
      - TELLER_AUTH_STYLE=${TELLER_AUTH_STYLE:-basic}
      - TELLER_ENROLLMENT_ID=${TELLER_ENROLLMENT_ID}
      - TELLER_ACCESS_TOKEN=${TELLER_ACCESS_TOKEN}
      - TELLER_SINCE_DAYS=${TELLER_SINCE_DAYS:-30}
      - FIN_ENC_KEY=${FIN_ENC_KEY}
      - TZ=${TZ}
    volumes:
      - ./secrets/teller:/secrets/teller:ro
    command: ["python", "/app/enroll.py"]
    restart: "no"

  teller-webhook:
    build:
      context: ./teller-webhook
    container_name: finance-teller-webhook
    env_file: .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TELLER_WEBHOOK_SECRET=${TELLER_WEBHOOK_SECRET}
      - TZ=${TZ}
    ports:
      - "${WEBHOOK_PORT:-8081}:8081"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped



volumes:
  db_data:
  raw_data:
  backups:
